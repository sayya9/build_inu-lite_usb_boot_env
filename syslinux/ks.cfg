#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512

# Use text mode install
text

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

# System timezone
timezone --utc Asia/Taipei

# Root password
rootpw --iscrypted $6$Iu434Je.N7BcmXGj$uhFrG/mSWe8OjB0bB3n3cdw85gxcFh8NZ6TDN.kQmvs.Qg8sD5CQylmiVQQ3aB1OzBVl0MvILZf8GoKT4ddCy.

# Reboot afer installing
reboot

%packages --nocore
openssh-clients
openssh-server
man
rsync
yum
curl
vim
git
bash-completion
%end

%pre
chvt 8
(
    # Check IP formation function
    CheckIpValidation() {
        if [[ "$1" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
            for (( i=1; i<${#BASH_REMATCH[@]}; ++i )); do
                (( ${BASH_REMATCH[$i]} <= 255 )) || return 1
            done
        else
            return 1
        fi
    }

    # Set hostname and network configuratio
    echo "################################"
    echo "# Please keyin blow question ! #"
    echo "################################"
    read -p "Hostname: " hostname

    for i in ip netmask gateway nameserver; do
        echo -n "${i^^}: "
        read $i
        while ! eval CheckIpValidation \$$i; do
            read -p "Invalid IP. Re-enter: " $i
        done
    done
    echo "network --bootproto=static --device=eth0 --hostname=$hostname --ip=$ip --netmask=$netmask --gateway=$gateway --nameserver=8.8.8.8 --nameserver=$nameserver" > /tmp/network
) < /dev/tty8 > /dev/tty8 2>&1

# Go back to tty1
chvt 1
exec < /dev/tty1 > /dev/tty1

# Create disk partitioning information
UsbDevice=`blkid -L BOOT | sed 's#/.*/\(.*\)[1-9].*#\1#g'`

if [ -b /dev/vda ]; then
    dd if=/dev/zero of=/dev/vda bs=512 count=1
    echo "bootloader --location=mbr --driveorder=vda --append=" rhgb crashkernel=auto quiet net.ifnames=0 biosdevname=0"" > /tmp/diskinfo
    echo "clearpart --drives=vda --all" >> /tmp/diskinfo
    echo "part pv.008002 --ondisk=/dev/vda --grow --size=1" >> /tmp/diskinfo
    echo "volgroup rootvg --pesize=4096 pv.008002" >> /tmp/diskinfo
    echo "logvol / --fstype=ext4 --name=rootlv --vgname=rootvg --grow --size=1024 --maxsize=51200" >> /tmp/diskinfo
    echo "logvol swap --name=swaplv --vgname=rootvg --grow --size=1024 --maxsize=4096" >> /tmp/diskinfo
    echo "part /boot --fstype=ext4 --size=512" >> /tmp/diskinfo

else
    InstallationDisk=`lsblk -Sn | grep -vi usb | awk '{print $1}'`
    dd if=/dev/zero of=/dev/$InstallationDisk bs=512 count=1
    echo "bootloader --location=mbr --driveorder=$InstallationDisk --append=" rhgb crashkernel=auto quiet net.ifnames=0 biosdevname=0"" > /tmp/diskinfo
    echo "clearpart --drives=$InstallationDisk --all" >> /tmp/diskinfo
    echo "part pv.008002 --ondisk=/dev/$InstallationDisk --grow --size=1" >> /tmp/diskinfo
    echo "volgroup rootvg --pesize=4096 pv.008002" >> /tmp/diskinfo
    echo "logvol / --fstype=ext4 --name=rootlv --vgname=rootvg --grow --size=1024 --maxsize=51200" >> /tmp/diskinfo
    echo "logvol swap --name=swaplv --vgname=rootvg --grow --size=1024 --maxsize=4096" >> /tmp/diskinfo
    echo "part /boot --fstype=ext4 --size=512" >> /tmp/diskinfo
fi
%end
%include /tmp/network
%include /tmp/diskinfo

%post --nochroot --log=/mnt/sysimage/root/ks-post.log
# Copy yum repository
mkdir -p /mnt/IMAGE && mount -L IMAGE /mnt/IMAGE
rsync -avz /mnt/IMAGE/yum_repo/ /mnt/sysimage/yum_repo/
cp -a /run/install/repo/{Packages,repodata} /mnt/sysimage/yum_repo/os/x86_64

# Disable reverse dns lookups in ssh
sed -i '/UseDNS/s/.*/UseDNS no/' /mnt/sysimage/etc/ssh/sshd_config

# Render yum repo configuration
mv /mnt/sysimage/etc/yum.repos.d{,.orig}
mkdir -p /mnt/sysimage/etc/yum.repos.d
cat << EOF > /mnt/sysimage/etc/yum.repos.d/centos.repo
[base]
name=Base
baseurl=file:///yum_repo/os/x86_64/
gpgcheck=0

[updates]
name=Updates
baseurl=file:///yum_repo/updates/x86_64/
gpgcheck=0
EOF

cat << EOF > /mnt/sysimage/etc/yum.repos.d/docker.repo
[dockerrepo]
name=Docker Repository
baseurl=file:///yum_repo/dockerrepo
gpgcheck=0
EOF

# Install docker and docker-compose
chroot /mnt/sysimage yum install -y docker-engine
chroot /mnt/sysimage systemctl enable docker
cp -a /mnt/IMAGE/tools/docker-compose /mnt/sysimage/usr/local/bin
chmod +x /mnt/sysimage/usr/local/bin/docker-compose

# Copy iNu docker compose and images
mkdir /mnt/sysimage/data
rsync -avz /mnt/IMAGE/inu-docker-compose/ /mnt/sysimage/data/inu-docker-compose/

# Enable firstboot
cat << EOF > /mnt/sysimage/root/firstboot.sh
while ! pidof dockerd; do sleep 5; done
cd /data/inu-docker-compose && ./run.sh -i

cat /etc/rc.d/rc.local | grep -v firstboot > /etc/rc.d/rc.local.tmp
rm -f /etc/rc.d/rc.local
mv /etc/rc.d/rc.local.tmp /etc/rc.d/rc.local
EOF

chmod +x /mnt/sysimage/etc/rc.d/rc.local
echo "bash /root/firstboot.sh > /root/firstboot_log.txt 2>&1" >> /mnt/sysimage/etc/rc.d/rc.local

# Disable SELINUX
sed -i -e 's/\(^SELINUX=\).*$/\1disabled/' /mnt/sysimage/etc/selinux/config

# Create root bash profile
rsync -avz /mnt/sysimage/etc/skel/ /mnt/sysimage/root/
%end
